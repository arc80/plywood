/*------------------------------------
  ///\  Plywood C++ Framework
  \\\/  https://plywood.arc80.com/
------------------------------------*/
#pragma once
#include <ply-reflect/Core.h>

namespace ply {

struct AnyObject;
struct TypeDescriptor;
class WriteFormatContext;
struct WriteObjectContext;
struct ReadObjectContext;
struct FormatDescriptor;

//-----------------------------------------------------------------------
// TypeKey
//
// Note: Future plan is to change TypeKey to an enum, autogenerated at config time (ie. when
// the build system is generated). Any systems that build upon reflection (like serialization,
// 3D rendering) will use global tables of function pointers -- also autogenerated at config
// time -- instead of hardcoding a bunch of system-specific function pointers here.
//
struct TypeKey {
    HybridString (*getName)(const TypeDescriptor* typeDesc);
    void (*write)(AnyObject obj, WriteObjectContext* context);
    void (*writeFormat)(TypeDescriptor* typeDesc, WriteFormatContext* context);
    void (*read)(AnyObject obj, ReadObjectContext* context, FormatDescriptor* formatDesc);
    void (*hashDescriptor)(Hasher& hasher, const TypeDescriptor* typeDesc);
    bool (*equalDescriptors)(const TypeDescriptor* type0, const TypeDescriptor* type1);

    TypeKey(decltype(getName) getName_, decltype(write) write_, decltype(writeFormat) writeFormat_,
            decltype(read) read_, decltype(hashDescriptor) hashTypeParams_,
            decltype(equalDescriptors) equalTypeParams_)
        : getName{getName_}, write{write_}, writeFormat{writeFormat_}, read{read_},
          hashDescriptor{hashTypeParams_}, equalDescriptors{equalTypeParams_} {
    }

    static void hashEmptyDescriptor(Hasher&, const TypeDescriptor*);
    static bool alwaysEqualDescriptors(const TypeDescriptor* typeDesc0,
                                       const TypeDescriptor* typeDesc1);
};

} // namespace ply
