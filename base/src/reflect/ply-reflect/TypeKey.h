/*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃     ____                                           ┃
┃    ╱   ╱╲    Plywood Multimedia Development Kit    ┃
┃   ╱___╱╭╮╲   https://plywood.dev/                  ┃
┃    └──┴┴┴┘                                         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/
#pragma once
#include <ply-reflect/Core.h>

namespace ply {

struct AnyObject;
struct TypeDescriptor;

//-----------------------------------------------------------------------
// TypeKey
//
// Note: Future plan is to change TypeKey to an enum, autogenerated at config time (ie.
// when the build system is generated). Any systems that build upon reflection (like
// serialization, 3D rendering) will use global tables of function pointers -- also
// autogenerated at config time -- instead of hardcoding a bunch of system-specific
// function pointers here.
//
struct TypeKey {
    HybridString (*get_name)(const TypeDescriptor* type_desc);
    void (*hash_descriptor)(Hasher& hasher, const TypeDescriptor* type_desc);
    bool (*equal_descriptors)(const TypeDescriptor* type0, const TypeDescriptor* type1);

    static void hash_empty_descriptor(Hasher&, const TypeDescriptor*);
    static bool always_equal_descriptors(const TypeDescriptor* type_desc0,
                                         const TypeDescriptor* type_desc1);
};

} // namespace ply
